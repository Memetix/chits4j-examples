/*
 * Copyright 2011 Memetix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.memetix.chits4jexamples;

import com.memetix.chits4j.agent.Agent;
import com.memetix.chits4j.agent.AgentService;
import com.memetix.chits4j.chit.Chit;
import com.memetix.chits4j.metric.Metric;
import com.memetix.chits4j.metric.MetricService;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.net.URL;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;

/**
 * A Swing client for testing the Chits API
 *
 * @author Jonathan Griggs <jonathan.griggs @ gmail.com>
 * @date Aug 7, 2011
 */
public class Chit4jGraphicalClient extends javax.swing.JFrame {
    AgentService aService = new AgentService();
    MetricService mService = new MetricService();
    DefaultListModel chitListModel = new DefaultListModel();

    /** Creates new form Chit4jGraphicalClient */
    public Chit4jGraphicalClient() {
        initComponents();
        setFont(new java.awt.Font("Arial Unicode MS", 0, 14));
        chitList.setCellRenderer(new ChitRenderer());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        metricName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        metricValue = new javax.swing.JTextField();
        writeMetricButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusText = new javax.swing.JTextArea();
        jToolBar2 = new javax.swing.JToolBar();
        jLabel3 = new javax.swing.JLabel();
        agentName = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        chitList = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chits API for Acheivements - Java Test Client");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jLabel1.setText("Name");
        jToolBar1.add(jLabel1);

        metricName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metricNameActionPerformed(evt);
            }
        });
        jToolBar1.add(metricName);

        jLabel2.setText("Value");
        jToolBar1.add(jLabel2);
        jToolBar1.add(metricValue);

        writeMetricButton.setText("Write Metric");
        writeMetricButton.setFocusable(false);
        writeMetricButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        writeMetricButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        writeMetricButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeMetricAction(evt);
            }
        });
        jToolBar1.add(writeMetricButton);

        statusText.setColumns(20);
        statusText.setRows(5);
        statusText.setBorder(javax.swing.BorderFactory.createTitledBorder("Message Log"));
        jScrollPane1.setViewportView(statusText);

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        jLabel3.setText("Agent");
        jToolBar2.add(jLabel3);
        jToolBar2.add(agentName);

        jButton1.setText("Refresh Agent");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshAgentPerform(evt);
            }
        });
        jToolBar2.add(jButton1);

        chitList.setBackground(new java.awt.Color(204, 204, 204));
        chitList.setBorder(javax.swing.BorderFactory.createTitledBorder("Chits"));
        chitList.setModel(chitListModel);
        jScrollPane2.setViewportView(chitList);

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.JLabel() {
            public javax.swing.Icon getIcon() {
                try {
                    return new javax.swing.ImageIcon(
                        new java.net.URL("http://chitsapi.com/static/images/logos/small_logo.png")
                    );
                } catch (java.net.MalformedURLException e) {
                }
                return null;
            }
        }.getIcon());

        jLabel5.setIcon(new javax.swing.JLabel() {
            public javax.swing.Icon getIcon() {
                try {
                    return new javax.swing.ImageIcon(
                        new java.net.URL("http://chitsapi.com/static/images/badge.png")
                    );
                } catch (java.net.MalformedURLException e) {
                }
                return null;
            }
        }.getIcon());
        jLabel5.setText("Chits API Â© 2011 - Memetix Inc.");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                .addContainerGap())
            .add(jToolBar2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
            .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
            .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
            .add(jToolBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jToolBar2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(25, 25, 25)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void metricNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metricNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_metricNameActionPerformed

    private void writeMetricAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeMetricAction
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                writeMetric();
            }
        });
    }//GEN-LAST:event_writeMetricAction

    private void refreshAgentPerform(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshAgentPerform
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                refreshAgent();
            }
        });
    }//GEN-LAST:event_refreshAgentPerform

    private void writeMetric() {
        try {
            final Metric metric = new Metric();
            metric.setAgent(agentName.getText());
            metric.setName(metricName.getText());
            metric.setValue(metricValue.getText());
            statusText.append(mService.writeMetric(metric).encodeAsJSON().toString() + "\n");
            refreshAgent();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Performing Localization : " + ex.toString(),"Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void refreshAgent() {
        try {
            final Agent agent = aService.getAgent(agentName.getText());
            chitListModel.removeAllElements();
            for(Chit chit : agent.getChits()) {
                if(!chitListModel.contains(chit)) {
                    chitListModel.add(0,chit);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Performing Localization : " + ex.toString(),"Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    class ChitRenderer extends JLabel
                       implements ListCellRenderer {
        public ChitRenderer() {
            setOpaque(true);
            setHorizontalAlignment(LEFT);
            setVerticalAlignment(CENTER);
            this.setBorder(BorderFactory.createEtchedBorder());
        }

   
        public Component getListCellRendererComponent(
                                           JList list,
                                           Object value,
                                           int index,
                                           boolean isSelected,
                                           boolean cellHasFocus) {
            
            //Set the icon and text.  If icon was null, say so.
            try {
                final String imageUrl = ((Chit)value).getImageUrl();
                final URL url = new URL(imageUrl!=null ? imageUrl : "http://chitsapi.com/static/images/chit/chit.png");
                final ImageIcon icon = new ImageIcon(url, ((Chit)value).getName());
                setIcon(icon);
            } catch(Exception ex) {
                
            }
            final String chitName = "<HTML><b>" + ((Chit)value).getName() + "</b><BR/><i>" + ((Chit)value).getDescription() + "</i></HTML>";
            setText(chitName);
            setFont(list.getFont());

            return this;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Chit4jGraphicalClient().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField agentName;
    private javax.swing.JList chitList;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JTextField metricName;
    private javax.swing.JTextField metricValue;
    private javax.swing.JTextArea statusText;
    private javax.swing.JButton writeMetricButton;
    // End of variables declaration//GEN-END:variables
}
